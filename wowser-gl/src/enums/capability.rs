use wowser_gl_sys::*;

pub enum Capability {
    AlphaTest,
    AutoNormal,
    Blend,
    ClipPlane0,
    ClipPlane1,
    ClipPlane2,
    ClipPlane3,
    ClipPlane4,
    ClipPlane5,
    ColorLogicOperation,
    ColorMaterial,
    ColorSum,
    ColorTable,
    Convolution1D,
    Convolution2D,
    CullFace,
    DepthTest,
    Dither,
    Fog,
    Histogram,
    IndexLogicOperation,
    Light0,
    Light1,
    Light2,
    Light3,
    Light4,
    Light5,
    Light6,
    Light7,
    Lighting,
    LineSmooth,
    LineStipple,
    Map1Color4,
    Map1Index,
    Map1Normal,
    Map1TextureCoord1,
    Map1TextureCoord2,
    Map1TextureCoord3,
    Map1TextureCoord4,
    Map1Vertex3,
    Map1Vertex4,
    Map2Color4,
    Map2Index,
    Map2Normal,
    Map2TextureCoord1,
    Map2TextureCoord2,
    Map2TextureCoord3,
    Map2TextureCoord4,
    Map2Vertex3,
    Map2Vertex4,
    MinMax,
    MultiSample,
    Normalize,
    PointSmooth,
    PointSprite,
    PolygonOffsetFill,
    PolygonOffsetLine,
    PolygonOffsetPoint,
    PolygonSmooth,
    PolygonStipple,
    PostColorMatrixColorTable,
    PostConvolutionColorTable,
    RescaleNormal,
    SampleAlphaToCoverage,
    SampleAlphaToOne,
    SampleCoverage,
    Separable2D,
    ScissorTest,
    StencilTest,
    Texture1D,
    Texture2D,
    Texture3D,
    TextureCubeMap,
    TextureGenQ,
    TextureGenR,
    TextureGenS,
    TextureGenT,
    VertexProgramPointSize,
    VertexProgramTwoSide,
}

impl From<Capability> for GLenum {
    fn from(capability: Capability) -> GLenum {
        match capability {
            Capability::AlphaTest => GL_ALPHA_TEST,
            Capability::AutoNormal => GL_AUTO_NORMAL,
            Capability::Blend => GL_BLEND,
            Capability::ClipPlane0 => GL_CLIP_PLANE0,
            Capability::ClipPlane1 => GL_CLIP_PLANE1,
            Capability::ClipPlane2 => GL_CLIP_PLANE2,
            Capability::ClipPlane3 => GL_CLIP_PLANE3,
            Capability::ClipPlane4 => GL_CLIP_PLANE4,
            Capability::ClipPlane5 => GL_CLIP_PLANE5,
            Capability::ColorLogicOperation => GL_COLOR_LOGIC_OP,
            Capability::ColorMaterial => GL_COLOR_MATERIAL,
            Capability::ColorSum => GL_COLOR_SUM,
            Capability::ColorTable => GL_COLOR_TABLE,
            Capability::Convolution1D => GL_CONVOLUTION_1D,
            Capability::Convolution2D => GL_CONVOLUTION_2D,
            Capability::CullFace => GL_CULL_FACE,
            Capability::DepthTest => GL_DEPTH_TEST,
            Capability::Dither => GL_DITHER,
            Capability::Fog => GL_FOG,
            Capability::Histogram => GL_HISTOGRAM,
            Capability::IndexLogicOperation => GL_INDEX_LOGIC_OP,
            Capability::Light0 => GL_LIGHT0,
            Capability::Light1 => GL_LIGHT1,
            Capability::Light2 => GL_LIGHT2,
            Capability::Light3 => GL_LIGHT3,
            Capability::Light4 => GL_LIGHT4,
            Capability::Light5 => GL_LIGHT5,
            Capability::Light6 => GL_LIGHT6,
            Capability::Light7 => GL_LIGHT7,
            Capability::Lighting => GL_LIGHTING,
            Capability::LineSmooth => GL_LINE_SMOOTH,
            Capability::LineStipple => GL_LINE_STIPPLE,
            Capability::Map1Color4 => GL_MAP1_COLOR_4,
            Capability::Map1Index => GL_MAP1_INDEX,
            Capability::Map1Normal => GL_MAP1_NORMAL,
            Capability::Map1TextureCoord1 => GL_MAP1_TEXTURE_COORD_1,
            Capability::Map1TextureCoord2 => GL_MAP1_TEXTURE_COORD_2,
            Capability::Map1TextureCoord3 => GL_MAP1_TEXTURE_COORD_3,
            Capability::Map1TextureCoord4 => GL_MAP1_TEXTURE_COORD_4,
            Capability::Map1Vertex3 => GL_MAP1_VERTEX_3,
            Capability::Map1Vertex4 => GL_MAP1_VERTEX_4,
            Capability::Map2Color4 => GL_MAP2_COLOR_4,
            Capability::Map2Index => GL_MAP2_INDEX,
            Capability::Map2Normal => GL_MAP2_NORMAL,
            Capability::Map2TextureCoord1 => GL_MAP2_TEXTURE_COORD_1,
            Capability::Map2TextureCoord2 => GL_MAP2_TEXTURE_COORD_2,
            Capability::Map2TextureCoord3 => GL_MAP2_TEXTURE_COORD_3,
            Capability::Map2TextureCoord4 => GL_MAP2_TEXTURE_COORD_4,
            Capability::Map2Vertex3 => GL_MAP2_VERTEX_3,
            Capability::Map2Vertex4 => GL_MAP2_VERTEX_4,
            Capability::MinMax => GL_MINMAX,
            Capability::MultiSample => GL_MULTISAMPLE,
            Capability::Normalize => GL_NORMALIZE,
            Capability::PointSmooth => GL_POINT_SMOOTH,
            Capability::PointSprite => GL_POINT_SPRITE,
            Capability::PolygonOffsetFill => GL_POLYGON_OFFSET_FILL,
            Capability::PolygonOffsetLine => GL_POLYGON_OFFSET_LINE,
            Capability::PolygonOffsetPoint => GL_POLYGON_OFFSET_POINT,
            Capability::PolygonSmooth => GL_POLYGON_SMOOTH,
            Capability::PolygonStipple => GL_POLYGON_STIPPLE,
            Capability::PostColorMatrixColorTable => GL_POST_COLOR_MATRIX_COLOR_TABLE,
            Capability::PostConvolutionColorTable => GL_POST_CONVOLUTION_COLOR_TABLE,
            Capability::RescaleNormal => GL_RESCALE_NORMAL,
            Capability::SampleAlphaToCoverage => GL_SAMPLE_ALPHA_TO_COVERAGE,
            Capability::SampleAlphaToOne => GL_SAMPLE_ALPHA_TO_ONE,
            Capability::SampleCoverage => GL_SAMPLE_COVERAGE,
            Capability::Separable2D => GL_SEPARABLE_2D,
            Capability::ScissorTest => GL_SCISSOR_TEST,
            Capability::StencilTest => GL_STENCIL_TEST,
            Capability::Texture1D => GL_TEXTURE_1D,
            Capability::Texture2D => GL_TEXTURE_2D,
            Capability::Texture3D => GL_TEXTURE_3D,
            Capability::TextureCubeMap => GL_TEXTURE_CUBE_MAP,
            Capability::TextureGenQ => GL_TEXTURE_GEN_Q,
            Capability::TextureGenR => GL_TEXTURE_GEN_R,
            Capability::TextureGenS => GL_TEXTURE_GEN_S,
            Capability::TextureGenT => GL_TEXTURE_GEN_T,
            Capability::VertexProgramPointSize => GL_VERTEX_PROGRAM_POINT_SIZE,
            Capability::VertexProgramTwoSide => GL_VERTEX_PROGRAM_TWO_SIDE,
        }
    }
}
